{"version":3,"sources":["../yjs/node_modules/browser-pack/_prelude.js","src/IndexedDB.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","generateGuid","Math","random","toString","replace","extend","Y","requestModules","then","createStoreClone","Store","Clone","_Store","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","apply","arguments","buffer","_copyTo","_inherits","_createClass","key","value","store","regeneratorRuntime","mark","put","v","dontCopy","wrap","_context10","prev","next","push","delegateYield","_get","prototype","stop","_delete","id","_context11","delete","flush","_context12","transaction","name","objectStore","find","_context","get","abrupt","sent","_context2","_context3","findWithLowerBound","start","_context4","openCursor","window","IDBKeyRange","lowerBound","findWithUpperBound","end","_context5","upperBound","findNext","_context6","t0","findPrev","_context7","iterate","gen","range","cursorResult","_context8","bound","result","continue","_context9","utils","BufferedStore","createSmallLookupBuffer","Transaction","_Y$Transaction","_this2","db","ss","os","ds","OperationStore","_Y$AbstractDatabase","y","options","gc","_this3","namespace","connector","room","idbVersion","requestTransaction","_callee","_context13","indexedDB","open","cleanStart","localStorage","JSON","stringify","_callee2","_context14","clear","whenUserIdSet","userid","_callee3","uid","nextuid","_context15","setUserId","parse","setTimeout","userId","operationsToAdd","communicationObserver","op","_callee4","_toAdd","_context16","parent","every","p","compareIds","operationAdded","localCommunication","addObserver","noAdd","_context17","broadcast","makeGen","handleTransactions","request","done","getNextRequest","constructor","IDBRequest","onsuccess","res","IDBCursorWithValue","onerror","err","throw","IDBCursor","IDBOpenDBRequest","event","target","onupgradeneeded","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","destroy","_context18","close","removeObserver","deleteDatabase","Promise","resolve","AbstractDatabase","observer","listener","filter","g","m","setItem","map","addEventListener","parsed","newValue"],"mappings":"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","file":"y-indexeddb.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global Y */\n'use strict'\n// Thx to @jed for this script https://gist.github.com/jed/982883\nfunction generateGuid(a){return a?(a^Math.random()*16>>a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,generateGuid)} // eslint-disable-line\n\nfunction extend (Y) {\n  Y.requestModules(['memory']).then(function () {\n    class Store {\n      constructor (transaction, name) {\n        this.store = transaction.objectStore(name)\n      }\n      * find (id) {\n        return yield this.store.get(id)\n      }\n      * put (v) {\n        yield this.store.put(v)\n      }\n      * delete (id) {\n        yield this.store.delete(id)\n      }\n      * findWithLowerBound (start) {\n        return yield this.store.openCursor(window.IDBKeyRange.lowerBound(start))\n      }\n      * findWithUpperBound (end) {\n        return yield this.store.openCursor(window.IDBKeyRange.upperBound(end), 'prev')\n      }\n      * findNext (id) {\n        return yield* this.findWithLowerBound([id[0], id[1] + 1])\n      }\n      * findPrev (id) {\n        return yield* this.findWithUpperBound([id[0], id[1] - 1])\n      }\n      * iterate (t, start, end, gen) {\n        var range = null\n        if (start != null && end != null) {\n          range = window.IDBKeyRange.bound(start, end)\n        } else if (start != null) {\n          range = window.IDBKeyRange.lowerBound(start)\n        } else if (end != null) {\n          range = window.IDBKeyRange.upperBound(end)\n        }\n        var cursorResult\n        if (range != null) {\n          cursorResult = this.store.openCursor(range)\n        } else {\n          cursorResult = this.store.openCursor()\n        }\n        while ((yield cursorResult) != null) {\n          yield* gen.call(t, cursorResult.result.value)\n          cursorResult.result.continue()\n        }\n      }\n      * flush () {}\n    }\n\n    function createStoreClone (Store) {\n      class Clone extends Store {\n        constructor () {\n          super(...arguments)\n          this.buffer = []\n          this._copyTo = null\n        }\n        // copy to this store\n        // it may be neccessary to reset this every time you create a transaction\n        copyTo (store) {\n          this._copyTo = store\n          return this\n        }\n        * put (v, dontCopy) {\n          if (!dontCopy) {\n            this.buffer.push(this._copyTo.put(v))\n          }\n          yield* super.put(v)\n        }\n        * delete (id) {\n          this.buffer.push(this._copyTo.delete(id))\n          yield* super.delete(id)\n        }\n        * flush () {\n          yield* super.flush()\n          for (var i = 0; i < this.buffer.length; i++) {\n            yield* this.buffer[i]\n          }\n          yield* this._copyTo.flush()\n        }\n      }\n      return Clone\n    }\n    Y.utils.createStoreClone = createStoreClone\n\n    var BufferedStore = Y.utils.createSmallLookupBuffer(Store)\n    // var ClonedStore = Y.utils.createStoreClone(Y.utils.RBTree)\n\n    class Transaction extends Y.Transaction {\n      constructor (store) {\n        super(store)\n        var transaction = store.db.transaction(['OperationStore', 'StateStore', 'DeleteStore'], 'readwrite')\n        this.store = store\n        this.ss = new BufferedStore(transaction, 'StateStore')\n        this.os = new BufferedStore(transaction, 'OperationStore')\n        // this._ds = new BufferedStore(transaction, 'DeleteStore')\n        // this.ds = store.dsClone.copyTo(this._ds)\n        this.ds = new BufferedStore(transaction, 'DeleteStore')\n      }\n    }\n    class OperationStore extends Y.AbstractDatabase {\n      constructor (y, options) {\n        /**\n         * There will be no garbage collection when using this connector!\n         * There may be several instances that communicate via localstorage,\n         * and we don't want too many instances to garbage collect.\n         * Currently, operationAdded (see AbstractDatabase) does not communicate updates to the garbage collector.\n         *\n         * While this could work, it only decreases performance.\n         * Operations are automatically garbage collected when the client syncs (the server still garbage collects, if there is any).\n         * Another advantage is that now the indexeddb adapter works with y-webrtc (since no gc is in place).\n         *\n         */\n        if (options.gc == null) {\n          options.gc = false\n        }\n        super(y, options)\n        // dsClone is persistent over transactions!\n        // _ds is not\n        // this.dsClone = new ClonedStore()\n        if (options == null) {\n          options = {}\n        }\n        this.options = options\n        if (options.namespace == null) {\n          if (y.options.connector.room == null) {\n            throw new Error('IndexedDB: expect a string (options.namespace)! (you can also skip this step if your connector has a room property)')\n          } else {\n            options.namespace = y.options.connector.room\n          }\n        }\n        if (options.idbVersion != null) {\n          this.idbVersion = options.idbVersion\n        } else {\n          this.idbVersion = 5\n        }\n        var store = this\n        // initialize database!\n        this.requestTransaction(function * () {\n          store.db = yield window.indexedDB.open(options.namespace, store.idbVersion)\n        })\n        if (options.cleanStart) {\n          delete window.localStorage[JSON.stringify(['Yjs_indexeddb', options.namespace])]\n          this.requestTransaction(function * () {\n            yield this.os.store.clear()\n            yield this.ds.store.clear() // formerly only _ds\n            yield this.ss.store.clear()\n          })\n        }\n        this.whenUserIdSet(function (userid) {\n          if (window.localStorage[JSON.stringify(['Yjs_indexeddb', options.namespace])] == null) {\n            window.localStorage[JSON.stringify(['Yjs_indexeddb', options.namespace])] = JSON.stringify([userid, 0])\n          }\n        })\n        this.requestTransaction(function * () {\n          // this should be executed after the previous two defined transactions\n          // after we computed the upgrade event (see `yield indexedDB.open(..)`), we can check if userid is still stored on localstorage\n          var uid = window.localStorage[JSON.stringify(['Yjs_indexeddb', options.namespace])]\n          if (uid != null) {\n            store.setUserId(uid)\n            var nextuid = JSON.parse(uid)\n            nextuid[1] = nextuid[1] + 1\n            window.localStorage[JSON.stringify(['Yjs_indexeddb', options.namespace])] = JSON.stringify(nextuid)\n          } else {\n            // wait for a 200ms before setting a random user id\n            window.setTimeout(function () {\n              if (store.userId == null) {\n                // the user is probably offline, so that the connector can't get a user id\n                store.setUserId(generateGuid()) // TODO: maybe it is best to always use a generated uid\n              }\n            }, 200)\n          }\n          // copy from persistent Store to non persistent StoreClone. (there could already be content in Store)\n          /*\n          yield* this._ds.iterate(this, null, null, function * (o) {\n            yield* this.ds.put(o, true)\n          })\n          */\n        })\n        var operationsToAdd = []\n        this.communicationObserver = function (op) {\n          operationsToAdd.push(op)\n          if (operationsToAdd.length === 1) {\n            store.requestTransaction(function * () {\n              var _toAdd = []\n              /*\n              There is a special case (see issue y-js/y-indexeddb#2) which we need to handle:\n              Assume a user creates a new type (lets say an Array) and then inserts something in it. Assume both operations are in operationsToAdd.\n              Since a type is initialized first, it already knows about the insertion, and we no longer need to call .operationAdded.\n              If we don't handle this case the type inserts the same operation twice.\n              => So wee need to filter out the operations whose parent is also inclduded in operationsToAdd!\n              */\n              for (var i = 0; i < operationsToAdd.length; i++) {\n                var op = operationsToAdd[i]\n                if (op.parent == null || operationsToAdd.every(function (p) {\n                  return !Y.utils.compareIds(p.id, op.parent)\n                })) {\n                  _toAdd.push(op)\n                }\n              }\n              operationsToAdd = []\n\n              for (i = 0; i < _toAdd.length; i++) {\n                yield* this.store.operationAdded(this, _toAdd[i], true)\n              }\n            })\n          }\n        }\n        Y.utils.localCommunication.addObserver(this.options.namespace, this.communicationObserver)\n      }\n      * operationAdded (transaction, op, noAdd) {\n        yield* super.operationAdded(transaction, op)\n        if (!noAdd) {\n          Y.utils.localCommunication.broadcast(this.options.namespace, op)\n        }\n      }\n      transact (makeGen) {\n        var transaction = this.db != null ? new Transaction(this) : null\n        var store = this\n\n        var gen = makeGen.call(transaction)\n        handleTransactions(gen.next())\n\n        function handleTransactions (result) {\n          var request = result.value\n          if (result.done) {\n            makeGen = store.getNextRequest()\n            if (makeGen != null) {\n              if (transaction == null && store.db != null) {\n                transaction = new Transaction(store)\n              }\n              gen = makeGen.call(transaction)\n              handleTransactions(gen.next())\n            } // else no transaction in progress!\n            return\n          }\n          // console.log('new request', request.source != null ? request.source.name : null)\n          if (request.constructor === window.IDBRequest) {\n            request.onsuccess = function () {\n              var res = request.result\n              if (res != null && res.constructor === window.IDBCursorWithValue) {\n                res = res.value\n              }\n              handleTransactions(gen.next(res))\n            }\n            request.onerror = function (err) {\n              gen.throw(err)\n            }\n          } else if (request.constructor === window.IDBCursor) {\n            request.onsuccess = function () {\n              handleTransactions(gen.next(request.result != null ? request.result.value : null))\n            }\n            request.onerror = function (err) {\n              gen.throw(err)\n            }\n          } else if (request.constructor === window.IDBOpenDBRequest) {\n            request.onsuccess = function (event) {\n              var db = event.target.result\n              handleTransactions(gen.next(db))\n            }\n            request.onerror = function () {\n              gen.throw(\"Couldn't open IndexedDB database!\")\n            }\n            request.onupgradeneeded = function (event) {\n              var db = event.target.result\n              delete window.localStorage[JSON.stringify(['Yjs_indexeddb', store.options.namespace])]\n              if (db.objectStoreNames.contains('OperationStore')) {\n                // delete only if exists (we skip the remaining tests)\n                db.deleteObjectStore('OperationStore')\n                db.deleteObjectStore('DeleteStore')\n                db.deleteObjectStore('StateStore')\n              }\n              db.createObjectStore('OperationStore', {keyPath: 'id'})\n              db.createObjectStore('DeleteStore', {keyPath: 'id'})\n              db.createObjectStore('StateStore', {keyPath: 'id'})\n            }\n          } else {\n            gen.throw('You must not yield this type!')\n          }\n        }\n      }\n      // TODO: implement \"free\"..\n      * destroy () {\n        this.db.close()\n      }\n      deleteDB () {\n        Y.utils.localCommunication.removeObserver(this.options.namespace, this.communicationObserver)\n        window.indexedDB.deleteDatabase(this.options.namespace)\n        return Promise.resolve()\n      }\n    }\n    if (Y.utils.localCommunication == null) {\n      // localCommunication uses localStorage to communicate with all tabs / windows\n      // Using pure localStorage does not call the event listener on the tab the event is created on.\n      // Using this implementation the event is also called on the tab the event is created on.\n      Y.utils.localCommunication = {\n        observer: {},\n        addObserver: function (room, f) {\n          var listener = this.observer[room]\n          if (listener == null) {\n            listener = []\n            this.observer[room] = listener\n          }\n          listener.push(f)\n        },\n        removeObserver: function (room, f) {\n          this.observer[room] = this.observer[room].filter(function (g) { return f !== g })\n        },\n        broadcast: function (room, m) {\n          window.localStorage.setItem(JSON.stringify(['__YJS__', room]), JSON.stringify(m))\n          this.observer[room].map(function (f) {\n            f(m)\n          })\n        }\n      }\n      window.addEventListener('storage', function (event) {\n        var room\n        try {\n          var parsed = JSON.parse(event.key)\n          if (parsed[0] === '__YJS__') {\n            room = parsed[1]\n          } else {\n            return\n          }\n        } catch (e) { return }\n        var listener = Y.utils.localCommunication.observer[room]\n        if (listener != null) {\n          listener.map(function (f) {\n            f(JSON.parse(event.newValue))\n          })\n        }\n      })\n    }\n    Y.extend('indexeddb', OperationStore)\n  })\n}\n\nmodule.exports = extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n"],"sourceRoot":"/source/"}