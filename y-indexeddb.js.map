{"version":3,"file":"y-indexeddb.js","sources":["src/y-indexeddb.js"],"sourcesContent":["/* global indexedDB, location, BroadcastChannel */\n\n/*\n * Request to Promise transformer\n */\nfunction rtop (request) {\n  return new Promise(function (resolve, reject) {\n    request.onerror = function (event) {\n      reject(new Error(event.target.error))\n    }\n    request.onblocked = function () {\n      location.reload()\n    }\n    request.onsuccess = function (event) {\n      resolve(event.target.result)\n    }\n  })\n}\n\nfunction openDB (room) {\n  return new Promise(function (resolve, reject) {\n    let request = indexedDB.open(room)\n    window.r1 = request\n    request.onupgradeneeded = function (event) {\n      const db = event.target.result\n      if (db.objectStoreNames.contains('model')) {\n        db.deleteObjectStore('updates')\n        db.deleteObjectStore('model')\n        db.deleteObjectStore('custom')\n      }\n      db.createObjectStore('updates', {autoIncrement: true})\n      db.createObjectStore('model')\n      db.createObjectStore('custom')\n    }\n    request.onerror = function (event) {\n      reject(new Error(event.target.error))\n    }\n    request.onblocked = function () {\n      location.reload()\n    }\n    request.onsuccess = function (event) {\n      const db = event.target.result\n      db.onversionchange = function () { db.close() }\n      resolve(db)\n    }\n  })\n}\n\nconst PREFERRED_TRIM_SIZE = 500\n\nexport default function extendYIndexedDBPersistence (Y) {\n  class IndexedDBPersistence extends Y.AbstractPersistence {\n    constructor (opts) {\n      super(opts)\n      window.addEventListener('unload', () => {\n        this.ys.forEach(function (cnf, y) {\n          if (cnf.db !== null) {\n            cnf.db.close()\n          } else {\n            cnf._db.then(db => db.close())\n          }\n        })\n      })\n    }\n    init (y) {\n      let cnf = this.ys.get(y)\n      let room = y.room\n      cnf.db = null\n      const dbOpened = openDB(room)\n      dbOpened.then(db => {\n        cnf.db = db\n      })\n      if (typeof BroadcastChannel !== 'undefined') {\n        cnf.channel = new BroadcastChannel('__yjs__' + room)\n        cnf.channel.addEventListener('message', e => {\n          cnf.mutualExclude(function () {\n            y.transact(function () {\n              Y.utils.integrateRemoteStructs(y, new Y.utils.BinaryDecoder(e.data))\n            }, true)\n          })\n        })\n      } else {\n        cnf.channel = null\n      }\n      return dbOpened\n    }\n\n    deinit (y) {\n      let cnf = this.ys.get(y)\n      cnf.db.close()\n      super.deinit(y)\n    }\n\n    set (y, key, value) {\n      const cnf = this.ys.get(y)\n      const t = cnf.db.transaction(['custom'], 'readwrite')\n      const customStore = t.objectStore('custom')\n      return rtop(customStore.put(value, key))\n    }\n\n    get (y, key) {\n      const cnf = this.ys.get(y)\n      const t = cnf.db.transaction(['custom'], 'readwrite')\n      const customStore = t.objectStore('custom')\n      return rtop(customStore.get(key))\n    }\n\n    /**\n     * Remove all persisted data that belongs to a room.\n     * Automatically destroys all Yjs all Yjs instances that persist to\n     * the room. If `destroyYjsInstances = false` the persistence functionality\n     * will be removed from the Yjs instances.\n     */\n    removePersistedData (room, destroyYjsInstances = true) {\n      super.removePersistedData(room, destroyYjsInstances)\n      return rtop(indexedDB.deleteDatabase(room))\n    }\n\n    saveUpdate (y, update) {\n      let cnf = this.ys.get(y)\n      if (cnf.channel !== null) {\n        cnf.channel.postMessage(update)\n      }\n      let t = cnf.db.transaction(['updates'], 'readwrite')\n      let updatesStore = t.objectStore('updates')\n      updatesStore.put(update)\n      let cntP = rtop(updatesStore.count())\n      cntP.then(cnt => {\n        if (cnt >= PREFERRED_TRIM_SIZE) {\n          this.persist(y)\n        }\n      })\n    }\n\n    saveStruct (y, struct) {\n      super.saveStruct(y, struct)\n    }\n\n    retrieve (y) {\n      let cnf = this.ys.get(y)\n      let t = cnf.db.transaction(['updates', 'model'], 'readonly')\n      let modelStore = t.objectStore('model')\n      let updatesStore = t.objectStore('updates')\n      return Promise.all([rtop(modelStore.get(0)), rtop(updatesStore.getAll())])\n        .then(([model, updates]) => {\n          super.retrieve(y, model, updates)\n        })\n    }\n\n    persist (y) {\n      let cnf = this.ys.get(y)\n      let db = cnf.db\n      let t = db.transaction(['updates', 'model'], 'readwrite')\n      let updatesStore = t.objectStore('updates')\n      return rtop(updatesStore.getAll())\n      .then(updates => {\n        // apply pending updates before deleting them\n        Y.AbstractPersistence.prototype.retrieve.call(this, y, null, updates)\n        // get binary model\n        let binaryModel = Y.AbstractPersistence.prototype.persist.call(this, y)\n        // delete all pending updates\n        if (updates.length > 0) {\n          let modelStore = t.objectStore('model')\n          modelStore.put(binaryModel, 0)\n          updatesStore.clear()\n        }\n      })\n    }\n  }\n  Y.IndexedDB = IndexedDBPersistence\n  return IndexedDBPersistence\n}\n\nif (typeof Y !== 'undefined') {\n  extendYIndexedDBPersistence(Y) // eslint-disable-line\n}\n"],"names":["rtop","request","Promise","resolve","reject","onerror","event","Error","target","error","onblocked","reload","onsuccess","result","openDB","room","indexedDB","open","r1","onupgradeneeded","db","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","onversionchange","close","extendYIndexedDBPersistence","Y","IndexedDBPersistence","opts","addEventListener","ys","forEach","cnf","y","_db","then","this","get","dbOpened","BroadcastChannel","channel","mutualExclude","transact","utils","integrateRemoteStructs","BinaryDecoder","e","data","key","value","transaction","objectStore","put","destroyYjsInstances","deleteDatabase","update","postMessage","t","updatesStore","count","cnt","PREFERRED_TRIM_SIZE","persist","struct","modelStore","all","getAll","model","updates","AbstractPersistence","prototype","retrieve","call","_this4","binaryModel","length","clear","IndexedDB"],"mappings":"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"}